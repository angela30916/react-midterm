{"version":3,"sources":["components/AddList.jsx","components/AddCard.jsx","components/List.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddList","props","useState","name","setName","isEditing","setEditing","editingTemplate","onSubmit","e","preventDefault","addTask","type","value","onChange","target","onClick","viewTemplate","className","AddCard","addCard","List","cards","setCards","id","onDragEnd","result","destination","index","source","newCards","startIndex","endIndex","Array","from","splice","remove","reorder","droppableId","provided","ref","innerRef","droppableProps","map","card","draggableId","toString","p","draggableProps","dragHandleProps","placeholder","App","tasks","setTasks","taskList","task","newTask","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSA6CeA,MA1Cf,SAAiBC,GAAQ,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,OAGUF,oBAAS,GAHnB,mBAGfG,EAHe,KAGJC,EAHI,KAiBhBC,EACJ,uBAAMC,SATR,SAAsBC,GACpBA,EAAEC,iBACEP,IACFF,EAAMU,QAAQR,GACdC,EAAQ,MAKV,UACE,uBAAOQ,KAAK,OAAOC,MAAOV,EAAMW,SAdpC,SAAsBL,GACpBL,EAAQK,EAAEM,OAAOF,UAcf,uBACA,uBACA,wBAAQD,KAAK,SAAb,SACE,8CAEF,wBAAQA,KAAK,SAASI,QAAS,kBAAMV,GAAW,IAAhD,SACE,0CAKAW,EACJ,wBAAQL,KAAK,SAASI,QAAS,kBAAMV,GAAW,IAAhD,SACE,uDAIJ,OACE,qBAAKY,UAAU,OAAf,SAAuBb,EAAYE,EAAkBU,K,oBCI1CE,MA1Cf,SAAiBlB,GAAQ,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,OAGUF,oBAAS,GAHnB,mBAGfG,EAHe,KAGJC,EAHI,KAiBhBC,EACJ,uBAAMC,SATR,SAAsBC,GACpBA,EAAEC,iBACEP,IACFF,EAAMmB,QAAQjB,GACdC,EAAQ,MAKV,UACE,uBAAOQ,KAAK,OAAOC,MAAOV,EAAMW,SAdpC,SAAsBL,GACpBL,EAAQK,EAAEM,OAAOF,UAcf,uBACA,uBACA,wBAAQD,KAAK,SAAb,SACE,8CAEF,wBAAQA,KAAK,SAASI,QAAS,kBAAMV,GAAW,IAAhD,SACE,0CAKAW,EACJ,wBAAQL,KAAK,SAASI,QAAS,kBAAMV,GAAW,IAAhD,SACE,uDAIJ,OACE,qBAAKY,UAAU,UAAf,SAA0Bb,EAAYE,EAAkBU,K,MC4B7CI,MAhEf,SAAcpB,GAAQ,IAAD,EACOC,mBAAS,IADhB,mBACZoB,EADY,KACLC,EADK,KAiCnB,OACE,sBAAKL,UAAU,OAAOM,GAAIvB,EAAMuB,GAAhC,UACGvB,EAAME,KACP,cAAC,IAAD,CAAiBsB,UArBH,SAACC,GACjB,GAAKA,EAAOC,aAIRD,EAAOC,YAAYC,QAAUF,EAAOG,OAAOD,MAA/C,CAIA,IAAME,EAjBR,SAAiBD,EAAQE,EAAYC,GACnC,IAAMN,EAASO,MAAMC,KAAKL,GADmB,EAE5BH,EAAOS,OAAOJ,EAAY,GAApCK,EAFsC,oBAK7C,OAFAV,EAAOS,OAAOH,EAAU,EAAGI,GAEpBV,EAYUW,CACff,EACAI,EAAOG,OAAOD,MACdF,EAAOC,YAAYC,OAGrBL,EAASO,KAMP,SACE,cAAC,IAAD,CAAWQ,YAAY,KAAvB,SACG,SAACC,GAAD,OACC,8CAAKC,IAAKD,EAASE,UAAcF,EAASG,gBAA1C,cACGpB,EAAMqB,KAAI,SAACC,EAAMhB,GAAP,OACT,cAAC,IAAD,CAAWiB,YAAajB,EAAMkB,WAAYlB,MAAOA,EAAjD,SACG,SAACmB,GAAD,OACC,yDACEP,IAAKO,EAAEN,UACHM,EAAEC,gBACFD,EAAEE,iBAHR,IAIE/B,UAAU,OAJZ,SAMG0B,WAKRL,EAASW,qBAKlB,cAAC,EAAD,CAAS9B,QAxDb,SAAiBjB,GACfoB,EAAS,GAAD,mBAAKD,GAAL,CAAYnB,Y,MCgBTgD,MAnBf,SAAalD,GAAQ,IAAD,EACQC,mBAAS,IADjB,mBACXkD,EADW,KACJC,EADI,KAOZC,EAAWF,EAAMT,KAAI,SAACY,GAAD,OACzB,cAAC,EAAD,CAAM/B,GAAI+B,EAAK/B,GAAIrB,KAAMoD,EAAKpD,MAAWoD,EAAK/B,OAGhD,OACE,sBAAKN,UAAU,MAAf,UACGoC,EACD,cAAC,EAAD,CAAS3C,QAXb,SAAiBR,GACf,IAAMqD,EAAU,CAAEhC,GAAI,QAAUiC,cAAUtD,KAAMA,GAChDkD,EAAS,GAAD,mBAAKD,GAAL,CAAYI,YCCTE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6cdbd009.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./AddList.css\";\n\nfunction AddList(props) {\n  const [name, setName] = useState(\"\");\n\n  const [isEditing, setEditing] = useState(false);\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (name) {\n      props.addTask(name);\n      setName(\"\");\n    }\n  }\n\n  const editingTemplate = (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={name} onChange={handleChange} />\n      <br />\n      <br />\n      <button type=\"submit\">\n        <span>Add list</span>\n      </button>\n      <button type=\"button\" onClick={() => setEditing(false)}>\n        <span>X</span>\n      </button>\n    </form>\n  );\n\n  const viewTemplate = (\n    <button type=\"button\" onClick={() => setEditing(true)}>\n      <span>＋ Add a list</span>\n    </button>\n  );\n\n  return (\n    <div className=\"memo\">{isEditing ? editingTemplate : viewTemplate}</div>\n  );\n}\n\nexport default AddList;\n","import React, { useState } from \"react\";\nimport \"./AddCard.css\";\n\nfunction AddCard(props) {\n  const [name, setName] = useState(\"\");\n\n  const [isEditing, setEditing] = useState(false);\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (name) {\n      props.addCard(name);\n      setName(\"\");\n    }\n  }\n\n  const editingTemplate = (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={name} onChange={handleChange} />\n      <br />\n      <br />\n      <button type=\"submit\">\n        <span>Add card</span>\n      </button>\n      <button type=\"button\" onClick={() => setEditing(false)}>\n        <span>X</span>\n      </button>\n    </form>\n  );\n\n  const viewTemplate = (\n    <button type=\"button\" onClick={() => setEditing(true)}>\n      <span>＋ Add a card</span>\n    </button>\n  );\n\n  return (\n    <div className=\"newCard\">{isEditing ? editingTemplate : viewTemplate}</div>\n  );\n}\n\nexport default AddCard;\n","import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddCard from \"./AddCard\";\nimport \"./List.css\";\n\nfunction List(props) {\n  const [cards, setCards] = useState([]);\n\n  function addCard(name) {\n    setCards([...cards, name]);\n  }\n\n  function reorder(source, startIndex, endIndex) {\n    const result = Array.from(source);\n    const [remove] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, remove);\n\n    return result;\n  }\n\n  const onDragEnd = (result) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    const newCards = reorder(\n      cards,\n      result.source.index,\n      result.destination.index\n    );\n\n    setCards(newCards);\n  };\n\n  return (\n    <div className=\"task\" id={props.id}>\n      {props.name}\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"id\">\n          {(provided) => (\n            <div ref={provided.innerRef} {...provided.droppableProps}>\n              {cards.map((card, index) => (\n                <Draggable draggableId={index.toString()} index={index}>\n                  {(p) => (\n                    <div\n                      ref={p.innerRef}\n                      {...p.draggableProps}\n                      {...p.dragHandleProps}\n                      className=\"card\"\n                    >\n                      {card}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <AddCard addCard={addCard} />\n    </div>\n  );\n}\n\nexport default List;\n","import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport AddList from \"./components/AddList\";\nimport List from \"./components/List\";\nimport \"./App.css\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState([]);\n\n  function addTask(name) {\n    const newTask = { id: \"task-\" + nanoid(), name: name };\n    setTasks([...tasks, newTask]);\n  }\n  const taskList = tasks.map((task) => (\n    <List id={task.id} name={task.name} key={task.id} />\n  ));\n\n  return (\n    <div className=\"App\">\n      {taskList}\n      <AddList addTask={addTask} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}